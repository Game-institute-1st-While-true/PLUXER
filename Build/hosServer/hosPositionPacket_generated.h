// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_HOSPOSITIONPACKET_HOS_PACKET_H_
#define FLATBUFFERS_GENERATED_HOSPOSITIONPACKET_HOS_PACKET_H_

#include "flatbuffers/flatbuffers.h"

#include "hosPacketData_generated.h"

namespace hos {
namespace Packet {

struct PositionProtocol;
struct PositionProtocolBuilder;

struct PositionProtocol FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PositionProtocolBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITION = 4,
    VT_ROTATION = 6
  };
  const hos::Packet::Vec3 *position() const {
    return GetStruct<const hos::Packet::Vec3 *>(VT_POSITION);
  }
  const hos::Packet::Vec3 *rotation() const {
    return GetStruct<const hos::Packet::Vec3 *>(VT_ROTATION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<hos::Packet::Vec3>(verifier, VT_POSITION) &&
           VerifyField<hos::Packet::Vec3>(verifier, VT_ROTATION) &&
           verifier.EndTable();
  }
};

struct PositionProtocolBuilder {
  typedef PositionProtocol Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_position(const hos::Packet::Vec3 *position) {
    fbb_.AddStruct(PositionProtocol::VT_POSITION, position);
  }
  void add_rotation(const hos::Packet::Vec3 *rotation) {
    fbb_.AddStruct(PositionProtocol::VT_ROTATION, rotation);
  }
  explicit PositionProtocolBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PositionProtocolBuilder &operator=(const PositionProtocolBuilder &);
  flatbuffers::Offset<PositionProtocol> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PositionProtocol>(end);
    return o;
  }
};

inline flatbuffers::Offset<PositionProtocol> CreatePositionProtocol(
    flatbuffers::FlatBufferBuilder &_fbb,
    const hos::Packet::Vec3 *position = 0,
    const hos::Packet::Vec3 *rotation = 0) {
  PositionProtocolBuilder builder_(_fbb);
  builder_.add_rotation(rotation);
  builder_.add_position(position);
  return builder_.Finish();
}

inline const hos::Packet::PositionProtocol *GetPositionProtocol(const void *buf) {
  return flatbuffers::GetRoot<hos::Packet::PositionProtocol>(buf);
}

inline const hos::Packet::PositionProtocol *GetSizePrefixedPositionProtocol(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<hos::Packet::PositionProtocol>(buf);
}

inline bool VerifyPositionProtocolBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<hos::Packet::PositionProtocol>(nullptr);
}

inline bool VerifySizePrefixedPositionProtocolBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<hos::Packet::PositionProtocol>(nullptr);
}

inline void FinishPositionProtocolBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<hos::Packet::PositionProtocol> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPositionProtocolBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<hos::Packet::PositionProtocol> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Packet
}  // namespace hos

#endif  // FLATBUFFERS_GENERATED_HOSPOSITIONPACKET_HOS_PACKET_H_
