// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GROUPLISTPACKET_HOS_PACKET_H_
#define FLATBUFFERS_GENERATED_GROUPLISTPACKET_HOS_PACKET_H_

#include "flatbuffers/flatbuffers.h"

#include "hosPacketData_generated.h"

namespace hos {
namespace Packet {

struct GroupData;
struct GroupDataBuilder;

struct GropuListProtocol;
struct GropuListProtocolBuilder;

struct GroupData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GroupDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NUMBER = 4,
    VT_NAME = 6
  };
  int32_t number() const {
    return GetField<int32_t>(VT_NUMBER, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_NUMBER) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct GroupDataBuilder {
  typedef GroupData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_number(int32_t number) {
    fbb_.AddElement<int32_t>(GroupData::VT_NUMBER, number, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(GroupData::VT_NAME, name);
  }
  explicit GroupDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GroupDataBuilder &operator=(const GroupDataBuilder &);
  flatbuffers::Offset<GroupData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GroupData>(end);
    return o;
  }
};

inline flatbuffers::Offset<GroupData> CreateGroupData(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t number = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  GroupDataBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_number(number);
  return builder_.Finish();
}

inline flatbuffers::Offset<GroupData> CreateGroupDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t number = 0,
    const char *name = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return hos::Packet::CreateGroupData(
      _fbb,
      number,
      name__);
}

struct GropuListProtocol FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GropuListProtocolBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LIST = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<hos::Packet::GroupData>> *list() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<hos::Packet::GroupData>> *>(VT_LIST);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LIST) &&
           verifier.VerifyVector(list()) &&
           verifier.VerifyVectorOfTables(list()) &&
           verifier.EndTable();
  }
};

struct GropuListProtocolBuilder {
  typedef GropuListProtocol Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<hos::Packet::GroupData>>> list) {
    fbb_.AddOffset(GropuListProtocol::VT_LIST, list);
  }
  explicit GropuListProtocolBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GropuListProtocolBuilder &operator=(const GropuListProtocolBuilder &);
  flatbuffers::Offset<GropuListProtocol> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GropuListProtocol>(end);
    return o;
  }
};

inline flatbuffers::Offset<GropuListProtocol> CreateGropuListProtocol(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<hos::Packet::GroupData>>> list = 0) {
  GropuListProtocolBuilder builder_(_fbb);
  builder_.add_list(list);
  return builder_.Finish();
}

inline flatbuffers::Offset<GropuListProtocol> CreateGropuListProtocolDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<hos::Packet::GroupData>> *list = nullptr) {
  auto list__ = list ? _fbb.CreateVector<flatbuffers::Offset<hos::Packet::GroupData>>(*list) : 0;
  return hos::Packet::CreateGropuListProtocol(
      _fbb,
      list__);
}

inline const hos::Packet::GropuListProtocol *GetGropuListProtocol(const void *buf) {
  return flatbuffers::GetRoot<hos::Packet::GropuListProtocol>(buf);
}

inline const hos::Packet::GropuListProtocol *GetSizePrefixedGropuListProtocol(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<hos::Packet::GropuListProtocol>(buf);
}

inline bool VerifyGropuListProtocolBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<hos::Packet::GropuListProtocol>(nullptr);
}

inline bool VerifySizePrefixedGropuListProtocolBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<hos::Packet::GropuListProtocol>(nullptr);
}

inline void FinishGropuListProtocolBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<hos::Packet::GropuListProtocol> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGropuListProtocolBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<hos::Packet::GropuListProtocol> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Packet
}  // namespace hos

#endif  // FLATBUFFERS_GENERATED_GROUPLISTPACKET_HOS_PACKET_H_
