// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ONECODE_DB_PACKET_H_
#define FLATBUFFERS_GENERATED_ONECODE_DB_PACKET_H_

#include "flatbuffers/flatbuffers.h"

namespace db {
namespace Packet {

struct OneCode;
struct OneCodeBuilder;

struct OneCode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef OneCodeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CODE = 4
  };
  int32_t code() const {
    return GetField<int32_t>(VT_CODE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_CODE) &&
           verifier.EndTable();
  }
};

struct OneCodeBuilder {
  typedef OneCode Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_code(int32_t code) {
    fbb_.AddElement<int32_t>(OneCode::VT_CODE, code, 0);
  }
  explicit OneCodeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  OneCodeBuilder &operator=(const OneCodeBuilder &);
  flatbuffers::Offset<OneCode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<OneCode>(end);
    return o;
  }
};

inline flatbuffers::Offset<OneCode> CreateOneCode(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t code = 0) {
  OneCodeBuilder builder_(_fbb);
  builder_.add_code(code);
  return builder_.Finish();
}

inline const db::Packet::OneCode *GetOneCode(const void *buf) {
  return flatbuffers::GetRoot<db::Packet::OneCode>(buf);
}

inline const db::Packet::OneCode *GetSizePrefixedOneCode(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<db::Packet::OneCode>(buf);
}

inline bool VerifyOneCodeBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<db::Packet::OneCode>(nullptr);
}

inline bool VerifySizePrefixedOneCodeBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<db::Packet::OneCode>(nullptr);
}

inline void FinishOneCodeBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<db::Packet::OneCode> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedOneCodeBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<db::Packet::OneCode> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Packet
}  // namespace db

#endif  // FLATBUFFERS_GENERATED_ONECODE_DB_PACKET_H_
