// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GAMEINFO_DB_PACKET_H_
#define FLATBUFFERS_GENERATED_GAMEINFO_DB_PACKET_H_

#include "flatbuffers/flatbuffers.h"

namespace db {
namespace Packet {

struct GameInfo;
struct GameInfoBuilder;

struct GameInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GameInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SESSION_ID = 4,
    VT_USERID = 6,
    VT_MYSCORE = 8,
    VT_BESTSCORE = 10
  };
  int32_t session_id() const {
    return GetField<int32_t>(VT_SESSION_ID, 0);
  }
  const flatbuffers::String *userid() const {
    return GetPointer<const flatbuffers::String *>(VT_USERID);
  }
  int32_t myscore() const {
    return GetField<int32_t>(VT_MYSCORE, 0);
  }
  int32_t bestscore() const {
    return GetField<int32_t>(VT_BESTSCORE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_SESSION_ID) &&
           VerifyOffset(verifier, VT_USERID) &&
           verifier.VerifyString(userid()) &&
           VerifyField<int32_t>(verifier, VT_MYSCORE) &&
           VerifyField<int32_t>(verifier, VT_BESTSCORE) &&
           verifier.EndTable();
  }
};

struct GameInfoBuilder {
  typedef GameInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_session_id(int32_t session_id) {
    fbb_.AddElement<int32_t>(GameInfo::VT_SESSION_ID, session_id, 0);
  }
  void add_userid(flatbuffers::Offset<flatbuffers::String> userid) {
    fbb_.AddOffset(GameInfo::VT_USERID, userid);
  }
  void add_myscore(int32_t myscore) {
    fbb_.AddElement<int32_t>(GameInfo::VT_MYSCORE, myscore, 0);
  }
  void add_bestscore(int32_t bestscore) {
    fbb_.AddElement<int32_t>(GameInfo::VT_BESTSCORE, bestscore, 0);
  }
  explicit GameInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GameInfoBuilder &operator=(const GameInfoBuilder &);
  flatbuffers::Offset<GameInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GameInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<GameInfo> CreateGameInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t session_id = 0,
    flatbuffers::Offset<flatbuffers::String> userid = 0,
    int32_t myscore = 0,
    int32_t bestscore = 0) {
  GameInfoBuilder builder_(_fbb);
  builder_.add_bestscore(bestscore);
  builder_.add_myscore(myscore);
  builder_.add_userid(userid);
  builder_.add_session_id(session_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<GameInfo> CreateGameInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t session_id = 0,
    const char *userid = nullptr,
    int32_t myscore = 0,
    int32_t bestscore = 0) {
  auto userid__ = userid ? _fbb.CreateString(userid) : 0;
  return db::Packet::CreateGameInfo(
      _fbb,
      session_id,
      userid__,
      myscore,
      bestscore);
}

inline const db::Packet::GameInfo *GetGameInfo(const void *buf) {
  return flatbuffers::GetRoot<db::Packet::GameInfo>(buf);
}

inline const db::Packet::GameInfo *GetSizePrefixedGameInfo(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<db::Packet::GameInfo>(buf);
}

inline bool VerifyGameInfoBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<db::Packet::GameInfo>(nullptr);
}

inline bool VerifySizePrefixedGameInfoBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<db::Packet::GameInfo>(nullptr);
}

inline void FinishGameInfoBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<db::Packet::GameInfo> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGameInfoBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<db::Packet::GameInfo> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Packet
}  // namespace db

#endif  // FLATBUFFERS_GENERATED_GAMEINFO_DB_PACKET_H_
