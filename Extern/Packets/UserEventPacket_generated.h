// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_USEREVENTPACKET_HOS_PACKET_H_
#define FLATBUFFERS_GENERATED_USEREVENTPACKET_HOS_PACKET_H_

#include "flatbuffers/flatbuffers.h"

#include "hosPacketData_generated.h"

namespace hos {
namespace Packet {

struct UserEventProtocol;
struct UserEventProtocolBuilder;

struct UserEventProtocol FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef UserEventProtocolBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6,
    VT_CERTIFICATION = 8,
    VT_EVENT = 10,
    VT_RESUILT = 12
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool certification() const {
    return GetField<uint8_t>(VT_CERTIFICATION, 0) != 0;
  }
  uint32_t event() const {
    return GetField<uint32_t>(VT_EVENT, 0);
  }
  uint32_t resuilt() const {
    return GetField<uint32_t>(VT_RESUILT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint8_t>(verifier, VT_CERTIFICATION) &&
           VerifyField<uint32_t>(verifier, VT_EVENT) &&
           VerifyField<uint32_t>(verifier, VT_RESUILT) &&
           verifier.EndTable();
  }
};

struct UserEventProtocolBuilder {
  typedef UserEventProtocol Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(UserEventProtocol::VT_ID, id, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(UserEventProtocol::VT_NAME, name);
  }
  void add_certification(bool certification) {
    fbb_.AddElement<uint8_t>(UserEventProtocol::VT_CERTIFICATION, static_cast<uint8_t>(certification), 0);
  }
  void add_event(uint32_t event) {
    fbb_.AddElement<uint32_t>(UserEventProtocol::VT_EVENT, event, 0);
  }
  void add_resuilt(uint32_t resuilt) {
    fbb_.AddElement<uint32_t>(UserEventProtocol::VT_RESUILT, resuilt, 0);
  }
  explicit UserEventProtocolBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  UserEventProtocolBuilder &operator=(const UserEventProtocolBuilder &);
  flatbuffers::Offset<UserEventProtocol> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<UserEventProtocol>(end);
    return o;
  }
};

inline flatbuffers::Offset<UserEventProtocol> CreateUserEventProtocol(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    bool certification = false,
    uint32_t event = 0,
    uint32_t resuilt = 0) {
  UserEventProtocolBuilder builder_(_fbb);
  builder_.add_resuilt(resuilt);
  builder_.add_event(event);
  builder_.add_name(name);
  builder_.add_id(id);
  builder_.add_certification(certification);
  return builder_.Finish();
}

inline flatbuffers::Offset<UserEventProtocol> CreateUserEventProtocolDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    const char *name = nullptr,
    bool certification = false,
    uint32_t event = 0,
    uint32_t resuilt = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return hos::Packet::CreateUserEventProtocol(
      _fbb,
      id,
      name__,
      certification,
      event,
      resuilt);
}

inline const hos::Packet::UserEventProtocol *GetUserEventProtocol(const void *buf) {
  return flatbuffers::GetRoot<hos::Packet::UserEventProtocol>(buf);
}

inline const hos::Packet::UserEventProtocol *GetSizePrefixedUserEventProtocol(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<hos::Packet::UserEventProtocol>(buf);
}

inline bool VerifyUserEventProtocolBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<hos::Packet::UserEventProtocol>(nullptr);
}

inline bool VerifySizePrefixedUserEventProtocolBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<hos::Packet::UserEventProtocol>(nullptr);
}

inline void FinishUserEventProtocolBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<hos::Packet::UserEventProtocol> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedUserEventProtocolBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<hos::Packet::UserEventProtocol> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Packet
}  // namespace hos

#endif  // FLATBUFFERS_GENERATED_USEREVENTPACKET_HOS_PACKET_H_
