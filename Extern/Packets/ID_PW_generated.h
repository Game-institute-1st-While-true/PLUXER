// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_IDPW_DB_PACKET_H_
#define FLATBUFFERS_GENERATED_IDPW_DB_PACKET_H_

#include "flatbuffers/flatbuffers.h"

namespace db {
namespace Packet {

struct IdPw;
struct IdPwBuilder;

struct IdPw FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef IdPwBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SESSION_ID = 4,
    VT_ID = 6,
    VT_PW = 8,
    VT_UUID = 10
  };
  int32_t session_id() const {
    return GetField<int32_t>(VT_SESSION_ID, 0);
  }
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  const flatbuffers::String *pw() const {
    return GetPointer<const flatbuffers::String *>(VT_PW);
  }
  int32_t uuid() const {
    return GetField<int32_t>(VT_UUID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_SESSION_ID) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_PW) &&
           verifier.VerifyString(pw()) &&
           VerifyField<int32_t>(verifier, VT_UUID) &&
           verifier.EndTable();
  }
};

struct IdPwBuilder {
  typedef IdPw Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_session_id(int32_t session_id) {
    fbb_.AddElement<int32_t>(IdPw::VT_SESSION_ID, session_id, 0);
  }
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(IdPw::VT_ID, id);
  }
  void add_pw(flatbuffers::Offset<flatbuffers::String> pw) {
    fbb_.AddOffset(IdPw::VT_PW, pw);
  }
  void add_uuid(int32_t uuid) {
    fbb_.AddElement<int32_t>(IdPw::VT_UUID, uuid, 0);
  }
  explicit IdPwBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  IdPwBuilder &operator=(const IdPwBuilder &);
  flatbuffers::Offset<IdPw> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<IdPw>(end);
    return o;
  }
};

inline flatbuffers::Offset<IdPw> CreateIdPw(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t session_id = 0,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    flatbuffers::Offset<flatbuffers::String> pw = 0,
    int32_t uuid = 0) {
  IdPwBuilder builder_(_fbb);
  builder_.add_uuid(uuid);
  builder_.add_pw(pw);
  builder_.add_id(id);
  builder_.add_session_id(session_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<IdPw> CreateIdPwDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t session_id = 0,
    const char *id = nullptr,
    const char *pw = nullptr,
    int32_t uuid = 0) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto pw__ = pw ? _fbb.CreateString(pw) : 0;
  return db::Packet::CreateIdPw(
      _fbb,
      session_id,
      id__,
      pw__,
      uuid);
}

inline const db::Packet::IdPw *GetIdPw(const void *buf) {
  return flatbuffers::GetRoot<db::Packet::IdPw>(buf);
}

inline const db::Packet::IdPw *GetSizePrefixedIdPw(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<db::Packet::IdPw>(buf);
}

inline bool VerifyIdPwBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<db::Packet::IdPw>(nullptr);
}

inline bool VerifySizePrefixedIdPwBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<db::Packet::IdPw>(nullptr);
}

inline void FinishIdPwBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<db::Packet::IdPw> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedIdPwBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<db::Packet::IdPw> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Packet
}  // namespace db

#endif  // FLATBUFFERS_GENERATED_IDPW_DB_PACKET_H_
